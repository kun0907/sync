package com.util.base;

import java.io.IOException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;

import org.springframework.context.annotation.Scope;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.constant.RedisStorageConfig;
import com.service.IGraphDateService;
import com.vo.FileInfo;
import com.vo.RebuildInfo;
import com.vo.ServiceIP;

import redis.clients.jedis.ShardedJedis;
import resolve.decoder.Packet;
import resolve.decoder.Pcap;

/**
 * 分析log 资源共享多线程
 * @author 任宝坤
 */
@Scope("prototype")
public class LogThreads extends ActionBase implements Callable<Object>{  
	
	private String fileName;
	private ShardedJedis jedis;

	public ShardedJedis getJedis() {
		return jedis;
	}

	public void setJedis(ShardedJedis jedis) {
		this.jedis = jedis;
	}

	public String getFileName() {
		return fileName;
	}

	public void setFileName(String fileName) {
		this.fileName = fileName;
	}

	public LogThreads(String fileName, ShardedJedis jedis) {
		this.fileName = fileName;
		this.jedis = jedis;
	}
	
	public static IGraphDateService service0;
	
	public static Map<String, Object> list_maps0 = new HashMap<String, Object>();
	public static NumberFormat df = new DecimalFormat("0.00");
	public static int ipId0;
	public static String serverpath;
	public static String username;
	public static String normData0;
	public static boolean logSta = true;
	public static String file;
	public static List<String> ipAddrIds = new ArrayList<String>();
	
	@SuppressWarnings("unchecked")
	public FileInfo call() throws Exception {
		log.info(Thread.currentThread().getName()+"  启动--子线程---"+fileName);
		String fileCur = fileName.substring(fileName.indexOf("@") + 1);
		int ipId = ipId0++;
		logSta = true;
		
		Map<String, FileInfo> fileInfosMap = new HashMap<String, FileInfo>();
		
		String host=null;
//		String ports = "";
		String timeEfficiency ="";
		
		String dnsDelsyTs;
		String serviceIp;
		double DNStimeDelayedcount = 0.0;//sum DNS时延(ms)
	    double tcpTimeDelayedcount = 0;	//sum TCP建链时延(ms)
	    double timeToFirstBytecount = 0;	//sum 建链后首包时延(ms)
	    double offTimeDelayedcount = 0;	//sum 断链时延(ms)
	    double rttTimecount = 0;	//sum RTT时间(ms)   平均报文请求响应时间
	    double exchangeTimecount = 0;	//sum 交互时间(ms)
		int tcpCount = 0;
		int packetCount = 0;
		double exchangeFlowCount = 0.0;
		double exchangeTimeCount = 0.0;
		double timeEfficiencyCount = 0.0;
		double lastTimeDelayed = 0.0;
		List<RebuildInfo> rebuildInfos = new ArrayList<RebuildInfo>();
		Pcap pcap = new Pcap();
		Packet[] packets = pcap.decode(serverpath+username + "/" + fileCur);  
	    AnalyzeResult result = new AnalyzeResult(packets);
	    result.assembleStreams();
	    Map<String, Object> maps = new HashMap<String, Object>();
		try {
			maps = result.tcp(ipId,fileName,username,this.jedis);
		} catch (IOException e) {
			log.error(e);
		}
	    FileInfo fileInfo = new FileInfo();
	    RebuildInfo rebuildInfo = new RebuildInfo();
	    
		List<ServiceIP> serviceIPs = new ArrayList<ServiceIP>();
		serviceIPs = (List<ServiceIP>) maps.get("serviceIPs");
	    maps.remove("serviceIPs");
	    
	    ipAddrIds.addAll((List<String>)maps.get("ipAddrIds"));
	    maps.remove("ipAddrIds");
	    list_maps0.put(fileCur, maps.get("tcpGraph"));
	    maps.remove("tcpGraph");
	    
	    fileInfo.setOthers((List<String>) maps.get("无效IP"));
	    fileInfo.setFileName(fileCur);
	    int maxFlowsIndex = 0;
	    int maxTCPipIndex = 0;
	    int serIPInfoSize= 0;
	    int maxSerIPInfoSize = 0;
	    double maxFlows = 0.0;
	    double t1 = 0;
	    double t2 = 0;
	    int num = 0;
	    double flows = 0.0;
		
	    StringBuffer downloadRate = new StringBuffer();
	    int links = 1;
	    for (int i=0; i<serviceIPs.size(); i++) {
            
	    	double allLastTimeDelayed = 0.0;
	    	double minLastTimeDelayed = 1000;

	    	int repeatCount = 1;
	    	dnsDelsyTs = serviceIPs.get(i).getServiceIPInfo().get(0).getDnsDelsyTs();
	    	if (dnsDelsyTs!=null && !serviceIPs.get(i).getServiceIPInfo().get(0).getDnsDelsyTs().equals("N/A")) 
	    		DNStimeDelayedcount += Double.parseDouble(serviceIPs.get(i).getServiceIPInfo().get(0).getDnsDelsyTs());
	    	
	    	serIPInfoSize = serviceIPs.get(i).getServiceIPInfo().size();
	    	if (serIPInfoSize > maxSerIPInfoSize) {
	    		maxSerIPInfoSize = serIPInfoSize;
	    		maxTCPipIndex = i;
			}
	    	tcpCount += serviceIPs.get(i).getServiceIPInfo().size();
	    	serviceIp = serviceIPs.get(i).getServiceIP();
	    	flows = 0.0;
	    	for(int j=0; j<serIPInfoSize; j++) {links++;
	    		if(!serviceIPs.get(i).getServiceIPInfo().get(j).getTcpTimeDelayed().equals("N/A"))
	    			tcpTimeDelayedcount += Double.parseDouble(serviceIPs.get(i).getServiceIPInfo().get(j).getTcpTimeDelayed());	     
	    		if(!serviceIPs.get(i).getServiceIPInfo().get(j).getTimeToFirstByte().equals("N/A"))	
	    			timeToFirstBytecount += Double.parseDouble(serviceIPs.get(i).getServiceIPInfo().get(j).getTimeToFirstByte());
	    		if(!serviceIPs.get(i).getServiceIPInfo().get(j).getOffTimeDelayed().equals("N/A") && !serviceIPs.get(i).getServiceIPInfo().get(j).getOffTimeDelayed().equals("ERROR"))
	    			offTimeDelayedcount += Double.parseDouble(serviceIPs.get(i).getServiceIPInfo().get(j).getOffTimeDelayed());
				
				
				rttTimecount += Double.parseDouble(serviceIPs.get(i).getServiceIPInfo().get(j).getRttTime());
				exchangeTimecount += Double.parseDouble(serviceIPs.get(i).getServiceIPInfo().get(j).getExchangeTime());
	    		
	    		packetCount += serviceIPs.get(i).getServiceIPInfo().get(j).getPacketCount();
	    		flows += Double.parseDouble(serviceIPs.get(i).getServiceIPInfo().get(j).getExchangeFlow());
	    		exchangeTimeCount += Double.parseDouble(serviceIPs.get(i).getServiceIPInfo().get(j).getExchangeTime());
	    		timeEfficiency = serviceIPs.get(i).getServiceIPInfo().get(j).getTimeEfficiency();
	    		if(!timeEfficiency.equals("N/A"))
	    			timeEfficiencyCount += Double.parseDouble(serviceIPs.get(i).getServiceIPInfo().get(j).getTimeEfficiency());
	    		if(j>0)
	    			lastTimeDelayed = Double.parseDouble(serviceIPs.get(i).getServiceIPInfo().get(j).getLastTimeDelayed());
	    		
	    		if(serviceIPs.get(i).getServiceIPInfo().get(j).getKind()<0){
	    			downloadRate.append("、"+serviceIp);
	    			downloadRate.append("("+serviceIPs.get(i).getServiceIPInfo().get(j).getPorts()+")");
	    		}
	    		
	    		if(serviceIPs.get(i).getServiceIPInfo().get(j).isHasHttpInfo()){
	    			t1 += serviceIPs.get(i).getServiceIPInfo().get(j).getT1();
	    			t2 += serviceIPs.get(i).getServiceIPInfo().get(j).getT2();
	    			num++;
	    		}
	    		if(0<=lastTimeDelayed && lastTimeDelayed<=1000 && j>0){
	    			
	    			repeatCount++;
	    			allLastTimeDelayed += lastTimeDelayed;
	    			if(minLastTimeDelayed>lastTimeDelayed)
	    				minLastTimeDelayed = lastTimeDelayed;
	    			host = serviceIPs.get(i).getServiceIPInfo().get(j).getHost();
//    				ports += "、"+String.valueOf(serviceIPs.get(i).getServiceIPInfo().get(j).getPorts());
    		
    				if(j==serIPInfoSize-1 && repeatCount>=3){
		    			rebuildInfo.setServiceIp(serviceIp);
		    			rebuildInfo.setRepeatCount(repeatCount);
		    			rebuildInfo.setMinLastTimeDelayed(df.format(minLastTimeDelayed));
		    			rebuildInfo.setAvgLastTimeDelayed(df.format(allLastTimeDelayed/(repeatCount-1)));
		    			rebuildInfo.setHost(host);
//		    			rebuildInfo.setPortAs(ports);
		    			rebuildInfos.add(rebuildInfo);
		    			rebuildInfo = new RebuildInfo();
		    			while (repeatCount != 1) {
		    				serviceIPs.get(i).getServiceIPInfo().get(j+1-repeatCount--).setOftenOffVerdict("Y");
						}
		    		}
	    		}else if(repeatCount>=3){
	    			rebuildInfo.setServiceIp(serviceIp);
	    			rebuildInfo.setRepeatCount(repeatCount);
	    			rebuildInfo.setMinLastTimeDelayed(df.format(minLastTimeDelayed));
	    			rebuildInfo.setAvgLastTimeDelayed(df.format(allLastTimeDelayed/(repeatCount-1)));
	    			rebuildInfo.setHost(host);
//	    			rebuildInfo.setPortAs(ports);
	    			rebuildInfos.add(rebuildInfo);
	    			rebuildInfo = new RebuildInfo();
//	    			ports = "、"+String.valueOf(serviceIPs.get(i).getServiceIPInfo().get(j).getPorts());
	    			allLastTimeDelayed = 0;
	    			minLastTimeDelayed = 2000;
	    			while (repeatCount != 1) {
	    				serviceIPs.get(i).getServiceIPInfo().get(j+1-repeatCount--).setOftenOffVerdict("Y");
					}
	    		}else{
	    			
	    			repeatCount = 1;
//	    			ports = "、"+String.valueOf(serviceIPs.get(i).getServiceIPInfo().get(j).getPorts());
	    			allLastTimeDelayed = 0;
	    			minLastTimeDelayed = 2000;
	    		}
	    	}
//	    	ports = "";
	    	exchangeFlowCount += flows;
	    	if ((flows - maxFlows) > 0.0) {
	    		maxFlows = flows;
	    		maxFlowsIndex = i;
	    	}
		}
        
		fileInfo.setAvgDnsDelsyTs(df.format(DNStimeDelayedcount/links));
		fileInfo.setAvgTcpTimeDelayed(df.format(tcpTimeDelayedcount/links));
		fileInfo.setAvgTimeToFirstByte(df.format(timeToFirstBytecount/links));
		fileInfo.setAvgOffTimeDelayed(df.format(offTimeDelayedcount/links));
		fileInfo.setAvgRttTime(df.format(rttTimecount/links));
		fileInfo.setAvgExchangeTime(df.format(exchangeTimecount/links));
		
	    StringBuffer maxFlowPort = new StringBuffer();
	    for(int i=0; i<serviceIPs.get(maxFlowsIndex).getServiceIPInfo().size(); i++) {
	    	maxFlowPort.append(serviceIPs.get(maxFlowsIndex).getServiceIPInfo().get(i).getPorts());
	    	maxFlowPort.append(",");
	    }
	    
	    maxFlowPort.deleteCharAt(maxFlowPort.length() - 1);
	    if(downloadRate.length()>0)
	    	downloadRate.deleteCharAt(0);
	    
		if(t1==0)
			fileInfo.setavgT1("N/A");
		else
			fileInfo.setavgT1(df.format((double)t1/num));
		if(t2==0)
			fileInfo.setavgT2("N/A"); 
		else
		    fileInfo.setavgT2(df.format((double)t2/num));
		
	    if(downloadRate.length() == 0)
	    	downloadRate.append("N/A");
	    fileInfo.setDownloadRate(downloadRate.toString());
	    fileInfo.setIpTCPCounts(maxSerIPInfoSize);
	    fileInfo.setMaxFlowIP(serviceIPs.get(maxFlowsIndex).getServiceIP());
	    fileInfo.setMaxTCPip(serviceIPs.get(maxTCPipIndex).getServiceIP());
	    fileInfo.setMaxFlowPort(maxFlowPort.toString());
	    fileInfo.setAllKeepTimes(df.format(pcap.getLogEndTs() * 1000));
	    fileInfo.setAllFileDataTimes(df.format(((double)maps.get("logFileData9")-(double)maps.get("logFileData1"))*1000));
	    if(DNStimeDelayedcount==0)
		    fileInfo.setDnsTimeDelayedcount("N/A");
	    else
	    	fileInfo.setDnsTimeDelayedcount(df.format(DNStimeDelayedcount));
	    fileInfo.setTcpCount(tcpCount);
	   
	    fileInfo.setPacketCount(packetCount);
	    fileInfo.setExchangeFlowCount(exchangeFlowCount);
	    fileInfo.setExchangeTimeCount(df.format(exchangeTimeCount));
	    if(timeEfficiencyCount==0)
	    	fileInfo.setTimeEfficiencyAVG("N/A");
	    else
	    	fileInfo.setTimeEfficiencyAVG(df.format(timeEfficiencyCount/tcpCount));
	    fileInfo.setServiceIP(serviceIPs);
	    if (rebuildInfos != null && rebuildInfos.size() > 0) {
	    	rebuildInfos = summaryRebuildInfos(rebuildInfos);
		}
	    fileInfo.setRebuildInfo(rebuildInfos);
	    //每个文件加入redis
//	    Jedis jedis = new Jedis("218.206.177.170",6379);//初始化Jedis
	    Map<String, Object> redisFileTcpGraph = new HashMap<String, Object>();
	    redisFileTcpGraph.put(fileCur, list_maps0.get(fileCur));
	    jedis.set(username + "_" + fileName + RedisStorageConfig.TCP_GRAPH, JSONObject.toJSONString(redisFileTcpGraph));
	    jedis.set(username + "_" + fileName + RedisStorageConfig.FILE_INFO, JSONObject.toJSONString(fileInfo));
	    log.info(JSON.toJSONString(fileInfosMap));
		log.info(Thread.currentThread().getName()+"  结束--子线程---"+fileCur);
		
		return fileInfo;
	}

	private List<RebuildInfo> summaryRebuildInfos(List<RebuildInfo> rebuildInfos) {
		List<RebuildInfo> list = new ArrayList<RebuildInfo>();
		RebuildInfo rebuild;
		int flag;
		for(RebuildInfo rebuildInfo : rebuildInfos) {
			flag = 0;
			for(int i=0; i<list.size(); i++) {
				if (list.get(i).getServiceIp().equals(rebuildInfo.getServiceIp())) {
					flag = 1;
					//计算实体类中数据
					rebuild = list.get(i);
					rebuild.setAvgLastTimeDelayed(String.valueOf(df.format(((Double.parseDouble(rebuild.getAvgLastTimeDelayed()) * rebuild.getRepeatCount()) +
																			 Double.parseDouble(rebuildInfo.getAvgLastTimeDelayed()) * rebuildInfo.getRepeatCount()) /
												   							(rebuild.getRepeatCount()+rebuildInfo.getRepeatCount()))));
					rebuild.setRepeatCount(rebuild.getRepeatCount() + rebuildInfo.getRepeatCount());
					if (Double.parseDouble(rebuild.getMinLastTimeDelayed()) > Double.parseDouble(rebuildInfo.getMinLastTimeDelayed())) {
						rebuild.setMinLastTimeDelayed(rebuildInfo.getMinLastTimeDelayed());
					}
					break;
				}
			}
			if (flag == 0) {
				list.add(rebuildInfo);
			}
		}
		return list;
	}

}

