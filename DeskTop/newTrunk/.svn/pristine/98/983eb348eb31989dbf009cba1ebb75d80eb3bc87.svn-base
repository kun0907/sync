package com.dkd.emms.web.system;

import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.IncorrectCredentialsException;
import org.apache.shiro.authc.UnknownAccountException;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.subject.Subject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;

import com.dkd.emms.core.util.menu.MenuBean;
import com.dkd.emms.core.util.menu.SysMenu;
import com.dkd.emms.systemManage.bo.User;



/**
 * 首页框架页面控制器
 * @author SY
 *
 */

@Controller
@RequestMapping(value="/jsp")
@SessionAttributes("currentUser")
public class JspController {
	
	@Autowired
	private MenuBean menuBean; 
	
	/**
	 * 登录成功
	 * @return
	 */
	
	@RequestMapping("/loginSuccess.do")  
	public ModelAndView loginSuccess(User user){
		Subject subject = SecurityUtils.getSubject();
		if(!subject.isAuthenticated()){
			UsernamePasswordToken token = new UsernamePasswordToken(user.getUserName(), user.getPassword());
			token.setRememberMe(true);
			try {
				subject.login(token);
			} catch (UnknownAccountException e) {
				// TODO: handle exception
				System.out.println("用户名不存在");
				return new ModelAndView("login");
				
			}catch (IncorrectCredentialsException e) {
				System.out.println("密码错误");
				return new ModelAndView("login");
			}
		}		
		return new ModelAndView(new RedirectView("index.do")); 
	}
	
	/**
	 * 首页
	 * @return
	 */
	@RequestMapping("/index.do")  
	public ModelAndView index(@ModelAttribute("currentUser")User user){
		return new ModelAndView("index","user",user);
	}
	
	/**
	 * 页面头部
	 * @return
	 */
	
	@RequestMapping("/header.do")  
	public ModelAndView header(@ModelAttribute("currentUser")User user){
		return new ModelAndView("index/header","user",user);
	}
	
	/**
	 * welcome
	 * @return
	 */
	
	@RequestMapping("/welcome.do")  
	public ModelAndView welcome(ModelMap model){
		return new ModelAndView("index/welcome",model);
	}
	/**
	 * 左侧菜单树
	 * @param model
	 * @return
	 */
	@RequestMapping("/menu.do")  
	public ModelAndView menu(Model model,@ModelAttribute("currentUser")User user){
		List<SysMenu> list = menuBean.getSysMenuList();//加载所有的用户菜单
//		List<SysMenu> userMenu = new ArrayList<SysMenu>();//为当前用户创建一个菜单集合
//		for(GrantedAuthority ga : user.getAuthorities()){//循环用户权限和菜单权限
//			for(SysMenu sm : list){
//				if(ga.getAuthority().equals(sm.getAuthority())){//用户拥有该菜单权限 添加至userMenu
//					userMenu.add(sm);
//				}
//			}
//		}
//		menuSort(userMenu);
		model.addAttribute("sysMenuList", list);
		return new ModelAndView("index/menu");
	}
	
	/**
	 * 菜单排序
	 * @param list
	 * @return
	 */
	
	private List<SysMenu> menuSort(List<SysMenu> list) { // 交换排序->冒泡排序  
		SysMenu temp = null;  
        boolean exchange = false;  
        for (int i = 0; i < list.size(); i++) {  
            exchange = false;  
            for (int j = list.size() - 2; j >= i; j--) {  
                if (((SysMenu) list.get(j + 1)).getOrder().compareTo(((SysMenu)list.get(j)).getOrder()) < 0) {  
                    temp = (SysMenu) list.get(j + 1);  
                    list.set(j + 1, (SysMenu) list.get(j));  
                    list.set(j, temp);  
                    exchange = true;  
                }  
            }  
            if (!exchange)  
                break;  
        }  
        return list;  
    } 
	
	@RequestMapping("/403.do")  
	public String error_403(){
		return "common/403";
	}
}
