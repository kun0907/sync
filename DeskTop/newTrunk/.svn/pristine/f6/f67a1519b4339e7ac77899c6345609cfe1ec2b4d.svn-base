package com.dkd.emms.systemManage.service;


import com.dkd.emms.core.dao.BaseDao;
import com.dkd.emms.core.exception.BusinessException;
import com.dkd.emms.core.service.BaseService;
import com.dkd.emms.core.util.uuid.Common;
import com.dkd.emms.core.util.uuid.UUIDGenerator;
import com.dkd.emms.systemManage.bo.*;
import com.dkd.emms.systemManage.dao.DeliveryDao;
import com.dkd.emms.systemManage.dao.PickNoticeDao;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * 承包商管理
 * @author wangqian
 *
 */
@Service
public class PickNoticeService extends BaseService<PickNotice> {
	@Autowired
	private PickNoticeDao pickNoticeDao;

	@Autowired
	private PickNoticeDetailService pickNoticeDetailService;

	@Autowired
	private SequenceService sequenceService;
	private SimpleDateFormat format = new SimpleDateFormat("yyyyMMdd");
	/**
	 * 编辑(新建)领料通知
	 * @param pickNoticeId
	 * @return
	 */
	public PickNotice editPickNotice(String pickNoticeId){
		PickNotice pickNotice = new PickNotice();
		if(StringUtils.isNotEmpty(pickNoticeId)){
			pickNotice = this.selectByPk(pickNoticeId);
		}
		return  pickNotice;
	}

	/**
	 * 保存领料通知
	 * @param pickNotice
	 * @param user
	 */
	@Transactional(propagation = Propagation.REQUIRED)
	public void savePickNotice(PickNotice pickNotice,User user){
		this.setDefault(pickNotice, user);
		if(StringUtils.isEmpty(pickNotice.getPickId())){
			pickNotice.setPickId(UUIDGenerator.getUUID());
			this.insert(pickNotice);
		}else{
			this.update(pickNotice);
		}
		pickNoticeDetailService.savePickNoticeDetail(pickNotice);
	}

	private void setDefault(PickNotice pickNotice,User user){
		if(StringUtils.isEmpty(pickNotice.getPickNoticeState())){
			pickNotice.setPickNoticeState(PickNoticeEnum.pickNoticeNew.toString());//新建状态
		}
		if(StringUtils.isEmpty(pickNotice.getPickNo())){//生成编码
			pickNotice.setPickNo(sequenceService.getFlowNoByJudge("pickNotice", "PMB"+"LL"+format.format(new Date()),5));
		}
		if(null == pickNotice.getSupplier()){
			if(null != user.getEmployee()){
				pickNotice.setSupplier(user.getEmployee().getOrganization());
			}else{
				pickNotice.setSupplier(null);
			}
		}
		if(StringUtils.isEmpty(pickNotice.getCreateUserId())){
			pickNotice.setCreateUserId(user.getUserId());
			if(null != user.getEmployee()){
				pickNotice.setCreateUserName(user.getEmployee().getEmpName());
			}else {
				pickNotice.setCreateUserName(user.getUserName());
			}
		}
		if(null == pickNotice.getCreateTime()){
			pickNotice.setCreateTime(new Date());
		}
	}
	@Transactional(propagation = Propagation.REQUIRED)
	public void deletePickNotice(String pickId){
		PickNotice pickNotice = this.selectByPk(pickId);
		pickNoticeDao.deletePickNotice(pickNotice);
		pickNoticeDetailService.delePickNoticeDetail(pickNotice);
	}

	/**
	 * 根据施工单位查询领料通知明细
	 * @return
	 */
	public List<PickNoticeDetail> loadPickDetailListData(Object object){
		Map<String, Object> map = new HashMap<String, Object>();
		map.put(object.getClass().getSimpleName(), object);
		return pickNoticeDetailService.loadPickDetailListData(map);
	}

	/**
	 * 提交领料通知
	 * @param pickId
	 */
	@Transactional(propagation = Propagation.REQUIRED)
	public void commit(String pickId) {
		PickNotice pickNotice = this.selectByPk(pickId);
		pickNotice.setPickNoticeState(PickNoticeEnum.pickNoticeCommit.toString());
		this.update(pickNotice);
	}
	@Override
	public BaseDao<PickNotice> getDao() {
		return pickNoticeDao;
	}


}
